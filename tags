	.\Session.vim	/^nmap  :tabe .$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
015|	.\Session.vim	/^normal! 015|$/;"	m
017|	.\Session.vim	/^normal! 017|$/;"	m
019|	.\Session.vim	/^normal! 019|$/;"	m
02|	.\Session.vim	/^normal! 02|$/;"	m
08|	.\Session.vim	/^normal! 08|$/;"	m
<F2>	.\Session.vim	/^map <F2> :!. build.sh$/;"	m
<F3>	.\Session.vim	/^map <F3> :!.\/output.exe$/;"	m
<F7>	.\Session.vim	/^map <F7> :tabp$/;"	m
<F8>	.\Session.vim	/^map <F8> :tabn$/;"	m
<Plug>NetrwBrowseX	.\Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())$/;"	m
<Plug>NetrwBrowseXVis	.\Session.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
A	.\Zik1.py	/^A = .05$/;"	v
B	.\Zik1.py	/^B = 0.001$/;"	v
D1	.\Zik1.py	/^D1 = 1.$/;"	v
D2	.\Zik1.py	/^D2 = 1.$/;"	v
Field	.\physical_state.cc	/^Field::Field($/;"	f	class:Field
Field	.\physical_state.h	/^class Field {$/;"	c
GrayScottStep	.\physical_state.cc	/^void PhysicalState::GrayScottStep() {$/;"	f	class:PhysicalState
InitValues	.\physical_state.cc	/^void PhysicalState::InitValues() {$/;"	f	class:PhysicalState
JapanStep	.\physical_state.cc	/^void PhysicalState::JapanStep() {$/;"	f	class:PhysicalState
Le	.\Zik1.py	/^Le=0.1$/;"	v
Pe	.\Zik1.py	/^Pe=.4$/;"	v
PhysicalState	.\physical_state.cc	/^PhysicalState::PhysicalState ($/;"	f	class:PhysicalState
PhysicalState	.\physical_state.h	/^class PhysicalState {$/;"	c
Print	.\physical_state.cc	/^void Field::Print(std::ostream& stream) {$/;"	f	class:Field
Print	.\physical_state.cc	/^void PhysicalState::Print(std::ostream& stream) {$/;"	f	class:PhysicalState
Random	.\physical_state.cc	/^double Random() {$/;"	f
Run	.\simulation.cc	/^void Simulation::Run() {$/;"	f	class:Simulation
S	.\Session.vim	/^map S cc<BS>$/;"	m
SessionLoad	.\Session.vim	/^let SessionLoad = 1$/;"	v
Set	.\physical_state.cc	/^void Field::Set(Field& field) {\/\/TODO implement using memset$/;"	f	class:Field
Set	.\physical_state.cc	/^void Field::Set(double base, double rand_base, int x1, int x2, int y1, int y2) {$/;"	f	class:Field
Set	.\physical_state.cc	/^void Field::Set(double value) {\/\/TODO implement using memset$/;"	f	class:Field
Set	.\physical_state.cc	/^void Field::Set(double value, int x1, int x2, int y1, int y2) {$/;"	f	class:Field
Set	.\physical_state.cc	/^void Field::Set(std::function<double(int,int)> function) {$/;"	f	class:Field
Simulation	.\simulation.cc	/^Simulation::Simulation($/;"	f	class:Simulation
Simulation	.\simulation.h	/^class Simulation {$/;"	c
Step	.\physical_state.cc	/^void PhysicalState::Step() {$/;"	f	class:PhysicalState
Step	.\simulation.cc	/^int Simulation::Step() {$/;"	f	class:Simulation
X	.\Zik1.py	/^X = 500$/;"	v
Y	.\Zik1.py	/^Y = 500$/;"	v
ax	.\Zik1.py	/^            ax = plt.subplot(231)$/;"	v
ax	.\view.py	/^        ax = plt.subplot("22"+str(field+1))$/;"	v
ax2	.\Zik1.py	/^            ax2 = plt.subplot(232)$/;"	v
ax3	.\Zik1.py	/^            ax3 = plt.subplot(233)$/;"	v
ax4	.\Zik1.py	/^            ax4 = plt.subplot(234)$/;"	v
ax5	.\Zik1.py	/^            ax5 = plt.subplot(235)$/;"	v
beta	.\Zik1.py	/^beta=20.$/;"	v
bound	.\Zik1.py	/^bound = np.zeros((2, X))$/;"	v
cax	.\Zik1.py	/^            cax = ax.imshow(u[:,:], interpolation='nearest')$/;"	v
cax	.\view.py	/^        cax = ax.imshow(data[field], interpolation='nearest')$/;"	v
cax2	.\Zik1.py	/^            cax2 = ax2.imshow(v, interpolation='nearest')$/;"	v
cax5	.\Zik1.py	/^            cax5 = ax5.imshow(s, interpolation='nearest')$/;"	v
cbar	.\view.py	/^        cbar = fig.colorbar(cax, ticks=[0,0.3, 0.5,1], orientation='vertical')$/;"	v
d2	.\Zik1.py	/^    d2 = 1$/;"	v
data	.\view.py	/^            data = np.zeros((3,size_x, size_y))$/;"	v
data_	.\physical_state.h	/^  double** data_;$/;"	m	class:Field
delta	.\Zik1.py	/^delta = 0.1$/;"	v
dt	.\Zik1.py	/^dt = 0.0025$/;"	v
dx	.\Zik1.py	/^dx = 0.5$/;"	v
f	.\Zik1.py	/^def f(u,v,s):$/;"	f
fig	.\Zik1.py	/^            fig = plt.figure(figsize=(12, 12)) $/;"	v
fig	.\Zik1.py	/^fig=plt.figure() $/;"	v
fig	.\view.py	/^fig=plt.figure() $/;"	v
file_in	.\view.py	/^file_in = open("out.txt", 'r')$/;"	v
gamma	.\Zik1.py	/^gamma=5.$/;"	v
gx	.\Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	.\Session.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
ha	.\Zik1.py	/^ha=0.328$/;"	v
haw	.\Zik1.py	/^haw=1.0$/;"	v
init	.\view.py	/^        init = False$/;"	v
init	.\view.py	/^init = True$/;"	v
jj	.\Session.vim	/^imap jj $/;"	m
lam	.\Zik1.py	/^lam=0.0$/;"	v
main	.\main.cc	/^int main(){$/;"	f
matplotlib	.\Zik1.py	/^import matplotlib$/;"	i
matplotlib	.\Zik1.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	.\view.py	/^import matplotlib.pyplot as plt$/;"	i
name	.\view.py	/^        name = file_in.readline()$/;"	v
np	.\Zik1.py	/^import numpy as np$/;"	i
np	.\view.py	/^import numpy as np$/;"	i
operator ()	.\physical_state.cc	/^double& Field::operator()(int i, int j){$/;"	f	class:Field
out_stream_	.\simulation.h	/^  std::ostream& out_stream_;$/;"	m	class:Simulation
phi	.\Zik1.py	/^phi=0.458$/;"	v
physical_state_	.\simulation.h	/^  PhysicalState physical_state_;$/;"	m	class:Simulation
plt	.\Zik1.py	/^import matplotlib.pyplot as plt$/;"	i
plt	.\view.py	/^import matplotlib.pyplot as plt$/;"	i
results	.\Zik1.py	/^    results=np.zeros((100,X))$/;"	v
s	.\Zik1.py	/^        s=s_new$/;"	v
s	.\Zik1.py	/^    s = np.ones((Y,X))$/;"	v
s:cpo_save	.\Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	.\Session.vim	/^let s:l = 2 - ((0 * winheight(0) + 27) \/ 55)$/;"	v
s:l	.\Session.vim	/^let s:l = 26 - ((25 * winheight(0) + 27) \/ 55)$/;"	v
s:l	.\Session.vim	/^let s:l = 3 - ((0 * winheight(0) + 27) \/ 55)$/;"	v
s:l	.\Session.vim	/^let s:l = 3084 - ((4 * winheight(0) + 27) \/ 55)$/;"	v
s:l	.\Session.vim	/^let s:l = 8 - ((5 * winheight(0) + 27) \/ 55)$/;"	v
s:l	.\Session.vim	/^let s:l = 98 - ((27 * winheight(0) + 27) \/ 55)$/;"	v
s:so_save	.\Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	.\Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	.\Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
s_new	.\Zik1.py	/^        s_new =np.maximum(0,s - haw*dt*gamma*f(u,v,s))$/;"	v
sigma	.\Zik1.py	/^sigma=0.02$/;"	v
size_x	.\view.py	/^        size_x = int(size_x)$/;"	v
size_x_	.\physical_state.h	/^  int size_x_;$/;"	m	class:Field
size_x_	.\physical_state.h	/^  int size_x_;$/;"	m	class:PhysicalState
size_x_	.\simulation.h	/^  int size_x_;$/;"	m	class:Simulation
size_y	.\view.py	/^        size_y = int(size_y)$/;"	v
size_y_	.\physical_state.h	/^  int size_y_;$/;"	m	class:Field
size_y_	.\physical_state.h	/^  int size_y_;$/;"	m	class:PhysicalState
size_y_	.\simulation.h	/^  int size_y_;$/;"	m	class:Simulation
step_no	.\view.py	/^    step_no = file_in.readline()$/;"	v
theta	.\Zik1.py	/^theta=1.94$/;"	v
u	.\Zik1.py	/^        u = u_new$/;"	v
u	.\Zik1.py	/^    u = 0.1*np.ones((Y,X))$/;"	v
u_	.\physical_state.h	/^  Field u_;$/;"	m	class:PhysicalState
u_new	.\Zik1.py	/^        u_new =u + dt*((1.0\/phi)*(1.0\/Le)*(1.\/(dx)**2)*(np.roll(u, -1, axis=1)+ np.roll(u, 1, axis=1)+np.roll(u, -1,axis=0)+np.roll(u, 1,axis=0)- 4*u ) - (1\/phi)*gamma*f(u,v,s) - Pe\/dx\/2.0*(np.roll(u, 1, axis=0) - np.roll(u,-1,axis=0)))$/;"	v
v	.\Zik1.py	/^        v = v_new$/;"	v
v	.\Zik1.py	/^    v = np.zeros((Y,X))$/;"	v
v0	.\Zik1.py	/^v0=1.0$/;"	v
v_	.\physical_state.h	/^  Field v_;$/;"	m	class:PhysicalState
v_new	.\Zik1.py	/^        v_new =v + dt*((0.3\/(dx)**2)*(np.roll(v, -1, axis=1)+ np.roll(v, 1, axis=1)+np.roll(v, -1,axis=0)+ np.roll(v, 1,axis=0)-4*v) +  beta*gamma*f(u,v,s)-Pe*phi*lam\/dx\/2.0*(np.roll(v, 1, axis=0)-np.roll(v,-1,axis=0)))-ha*(v-sigma)*dt$/;"	v
vp	.\Zik1.py	/^vp=0.45$/;"	v
w0	.\Zik1.py	/^w0=0.1$/;"	v
w_	.\physical_state.h	/^  Field w_;$/;"	m	class:PhysicalState
zt	.\Session.vim	/^normal! zt$/;"	m
~Field	.\physical_state.cc	/^Field::~Field() {$/;"	f	class:Field
